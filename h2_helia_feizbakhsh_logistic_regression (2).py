# -*- coding: utf-8 -*-
"""h2.Helia Feizbakhsh.logistic regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c500Dy0loQcNV70XO-4O18Mpcp4ZX5ZV
"""

import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt

from sklearn.datasets import load_iris
iris_dataset = load_iris()
iris= pd.DataFrame(iris_dataset.data, columns=iris_dataset.feature_names)
iris['class'] = iris_dataset.target
iris.head()

print(iris_dataset.DESCR)

plt.figure(figsize=(20, 5))

features = ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']
target = iris['class']

for i, col in enumerate(features):
    plt.subplot(1, len(features) , i+1)
    x = iris[col]
    y = target
    plt.scatter(x, y, marker='o')
    plt.title(col)
    plt.xlabel(col)
    plt.ylabel('class')

iris.isnull().sum()

from sklearn.model_selection import train_test_split

x = iris.iloc[:,[0,1,2,3]].values
y = iris.iloc[:,4].values

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25,random_state=0)

print("x_trian.shape: ", x_train.shape)
print("x_test.shape: ", x_test.shape)
print("y_trian.shape: ", y_train.shape)
print("y_test.shape: ", y_test.shape)

from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0, solver='lbfgs', multi_class='multinomial')
classifier.fit(x_train, y_train)

y_train_predict = classifier.predict(x_train)

confusionmatrix = confusion_matrix(y_train, y_train_predict)
accuracyscore = accuracy_score(y_train, y_train_predict)
precisionscore = precision_score(y_train, y_train_predict, average='macro')
recallscore = recall_score(y_train, y_train_predict, average='micro')
f1score = f1_score(y_train, y_train_predict, average='micro')

print("\n")
print("The model performance for training set")
print("--------------------------------------")
print('confusion_matrix is\n {}\n'.format(confusionmatrix))
print('accuracy_score is {}\n'.format(accuracyscore))
print('precision_score is {}\n'.format(precisionscore))
print('recall_score is {}\n'.format(recallscore))
print('f1_score is {}'.format(f1score))
print("\n")

ax = plt.axes()
sns.heatmap(confusionmatrix, annot=True, annot_kws={"size": 30}, fmt='d',cmap="Blues", ax = ax )
ax.set_title('Confusion Matrix')
plt.show()

y_test_predict = classifier.predict(x_test)

confusionmatrix = confusion_matrix(y_test, y_test_predict)
raccuracyscore = accuracy_score(y_test, y_test_predict)
precisionscore = precision_score(y_test, y_test_predict, average='micro')
recallscore = recall_score(y_test, y_test_predict, average='micro')
f1score = f1_score(y_test, y_test_predict, average='micro')

print("\n")
print("The model performance for training set")
print("--------------------------------------")
print('confusion_matrix is\n {}\n'.format(confusionmatrix))
print('accuracy_score is {}\n'.format(raccuracyscore))
print('precision_score is {}\n'.format(precisionscore))
print('recall_score is {}\n'.format(recallscore))
print('f1_score is {}'.format(f1score))
print("\n")

ax = plt.axes()
sns.heatmap(confusionmatrix, annot=True, annot_kws={"size": 30}, fmt='d',cmap="Blues", ax = ax )
ax.set_title('Confusion Matrix')
plt.show()

probs_y_train=classifier.predict_proba(x_train)

probs_y_train = np.round(probs_y_train, 2)

res = "{:<10} | {:<15} | {:<10} | {:<13} | {:<5}".format("y_train", "y_train_predict", "Setosa(%)", "versicolor(%)", "virginica(%)\n")
res += "-"*72+"\n"
res += "\n".join("{:<10} | {:<15} | {:<10} | {:<13} | {:<10}".
                 format(x, y, a, b, c) for x, y, a, b, c in zip(y_train, y_train_predict, probs_y_train[:,0], probs_y_train[:,1], probs_y_train[:,2]))

res += "\n"+"-"*72+"\n"
print(res)

probs_y=classifier.predict_proba(x_test)

probs_y = np.round(probs_y, 2)

res = "{:<10} | {:<14} | {:<10} | {:<13} | {:<5}".format("y_test", "y_test_predict" , "Setosa(%)", "versicolor(%)", "virginica(%)\n")
res += "-"*71+"\n"
res += "\n".join("{:<10} | {:<14} | {:<10} | {:<13} | {:<10}".
format(x, y, a, b, c) for x, y, a, b, c in zip( y_test, y_test_predict , probs_y[:,0], probs_y[:,1], probs_y[:,2]))
res += "\n"+"-"*71+"\n"
print(res)