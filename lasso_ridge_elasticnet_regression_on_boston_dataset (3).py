# -*- coding: utf-8 -*-
"""Lasso_Ridge_ElasticNet_regression_on_boston_dataset

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WtgeOmUhFwsHD2D-T9jVy-GSjqq6DvnY
"""

import numpy as np
import pandas as pd
import seaborn as sns 
from matplotlib import pyplot as plt

from sklearn.datasets import load_boston

boston_dataset = load_boston()
boston = pd.DataFrame(boston_dataset.data, columns=boston_dataset.feature_names)
boston['MEDV'] = boston_dataset.target
boston.head()

print(boston_dataset.DESCR)

boston.isnull().sum()

sns.set(rc={'figure.figsize':(11.7,8.27)})
sns.distplot(boston['MEDV'], bins=30)
plt.show()

correlation_matrix = boston.corr().round(2)

sns.heatmap(data=correlation_matrix, annot=True)

X = boston.iloc[:,:-1]
y = boston['MEDV']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=42)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error, r2_score

lasso_model = Lasso(alpha=1)
lasso_model.fit(X_train, y_train)

print(lasso_model)
print("\nCoefficient of the features:\n{}\n".format(lasso_model.coef_))
print("Intercept:\n{}\n".format(lasso_model.intercept_))

y_train_predict = lasso_model.predict(X_train)
rmse = (np.sqrt(mean_squared_error(y_train, y_train_predict)))
r2 = r2_score(y_train, y_train_predict)

print("\n")
print("The model performance for training set")
print("--------------------------------------")
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
print("\n")

plt.plot(np.arange(0, y_train.shape[0]), y_train, label="y_train")
plt.plot(np.arange(0, y_train_predict.shape[0]), y_train_predict, label="y_train_predict")
plt.legend()
plt.show()

y_test_predict = lasso_model.predict(X_test)
rmse = (np.sqrt(mean_squared_error(y_test, y_test_predict)))
r2 = r2_score(y_test, y_test_predict)

print("\n")
print("The model performance for testing set")
print("--------------------------------------")
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
print("\n")

plt.plot(np.arange(0, y_test.shape[0]), y_test, label="y_test")
plt.plot(np.arange(0, y_test_predict.shape[0]), y_test_predict, label="y_test_predict")
plt.legend()
plt.show()

from sklearn.linear_model import Ridge

ridge_model = Ridge(alpha=1)
ridge_model.fit(X_train, y_train)

print(ridge_model)
print("\nCoefficient of the features:\n{}\n".format(ridge_model.coef_))
print("Intercept:\n{}\n".format(ridge_model.intercept_))

y_train_predict = ridge_model.predict(X_train)
rmse = (np.sqrt(mean_squared_error(y_train, y_train_predict)))
r2 = r2_score(y_train, y_train_predict)

print("\n")
print("The model performance for training set")
print("--------------------------------------")
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
print("\n")

plt.plot(np.arange(0, y_train.shape[0]), y_train, label="y_train")
plt.plot(np.arange(0, y_train_predict.shape[0]), y_train_predict, label="y_train_predict")
plt.legend()
plt.show()

y_test_predict = ridge_model.predict(X_test)
rmse = (np.sqrt(mean_squared_error(y_test, y_test_predict)))
r2 = r2_score(y_test, y_test_predict)

print("\n")
print("The model performance for testing set")
print("--------------------------------------")
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
print("\n")

plt.plot(np.arange(0, y_test.shape[0]), y_test, label="y_test")
plt.plot(np.arange(0, y_test_predict.shape[0]), y_test_predict, label="y_test_predict")
plt.legend()
plt.show()

from sklearn.linear_model import ElasticNet

elasticnet_model = ElasticNet(alpha=1)
elasticnet_model.fit(X_train, y_train)

print(elasticnet_model)
print("\nCoefficient of the features:\n{}\n".format(elasticnet_model.coef_))
print("Intercept:\n{}\n".format(elasticnet_model.intercept_))

y_train_predict = elasticnet_model.predict(X_train)
rmse = (np.sqrt(mean_squared_error(y_train, y_train_predict)))
r2 = r2_score(y_train, y_train_predict)

print("\n")
print("The model performance for training set")
print("--------------------------------------")
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
print("\n")

plt.plot(np.arange(0, y_train.shape[0]), y_train, label="y_train")
plt.plot(np.arange(0, y_train_predict.shape[0]), y_train_predict, label="y_train_predict")
plt.legend()
plt.show()

y_test_predict = elasticnet_model.predict(X_test)
rmse = (np.sqrt(mean_squared_error(y_test, y_test_predict)))
r2 = r2_score(y_test, y_test_predict)

print("\n")
print("The model performance for testing set")
print("--------------------------------------")
print('RMSE is {}'.format(rmse))
print('R2 score is {}'.format(r2))
print("\n")

plt.plot(np.arange(0, y_test.shape[0]), y_test, label="y_test")
plt.plot(np.arange(0, y_test_predict.shape[0]), y_test_predict, label="y_test_predict")
plt.legend()
plt.show()