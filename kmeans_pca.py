# -*- coding: utf-8 -*-
"""KMeans_PCA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OxyCercalDLTpBe2COnh_QQvh4iLZkf3
"""

import tarfile
import urllib

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
uci_tcga_url = "https://archive.ics.uci.edu/ml/machine-learning-databases/00401/"
archive_name = "TCGA-PANCAN-HiSeq-801x20531.tar.gz"

# Build the url
full_download_url = urllib.parse.urljoin(uci_tcga_url, archive_name)

# Download the file
r = urllib.request.urlretrieve (full_download_url, archive_name)

# Extract the data from the archive
tar = tarfile.open(archive_name, "r:gz")
tar.extractall()
tar.close()
datafile = "TCGA-PANCAN-HiSeq-801x20531/data.csv"
labels_file = "TCGA-PANCAN-HiSeq-801x20531/labels.csv"

X = pd.read_csv(datafile, usecols=range(1, 20532))
y = pd.read_csv(labels_file, usecols=['Class'])

X.describe()

print('X.isnull().sum():\n', X.isnull().sum())
print('\nX.isnull().sum().value_counts(): ', X.isnull().sum().value_counts())

X.head(1)

y.head(1)

print("X.shape: ", X.shape)
print("y.shape: ", y.shape)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X = scaler.fit_transform(X)

from sklearn.decomposition import PCA

pca = PCA(n_components=2, random_state=42)
X = pca.fit_transform(X)

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
y = label_encoder.fit_transform(np.ravel(y))
n_clusters = len(label_encoder.classes_)

print('label_encoder.classes :', label_encoder.classes_)

from sklearn.metrics import silhouette_score, adjusted_rand_score
from sklearn.cluster import KMeans

kmeans = KMeans(n_clusters=n_clusters, init="k-means++", n_init=50, max_iter=500, random_state=42)
kmeans.fit(X)

y_predict = kmeans.predict(X)

print('silhouette score: ', silhouette_score(X, y_predict))
print('adjusted rand score: ', adjusted_rand_score(y, y_predict))

pcadf = pd.DataFrame(X, columns=["component_1", "component_2"])

pcadf["predicted_cluster"] = y_predict
pcadf["true_label"] = label_encoder.inverse_transform(y)

plt.style.use("fivethirtyeight")
plt.figure(figsize=(8, 8))

scat = sns.scatterplot(
    "component_1",
    "component_2",
    s=100,
    data=pcadf,
    hue="predicted_cluster",
    style="true_label",
    palette="Set2",
)

scat.set_title(
    "Clustering results from TCGA Pan-Cancer\nGene Expression Data"
)
plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.0)

plt.show()